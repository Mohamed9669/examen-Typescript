Voici un **prompt clair et structuré** en TypeScript pour l’agent IA **Cursor** ou tout autre outil de génération de code. Il suit exactement ce que vous avez demandé, avec tous les éléments organisés pour le backend (json-server) et le frontend (Vite + TypeScript + Tailwind).

---

## ✅ **Prompt complet TypeScript / Node / Vite / Tailwind / json-server**

> 📦 **Projet complet en deux parties : Backend (json-server) & Frontend (Vite + TS + Tailwind)**
>
> ### 🔧 **1. Backend (Node.js + json-server)**
>
> * Créer un projet Node.js nommé **`app.back`**
> * Initialiser le projet avec TypeScript (`tsconfig.json`)
> * Installer et configurer `json-server`
> * Créer un fichier `db.json` contenant la structure des données affichées dans les écrans :
>
>   * `articles[]` (id, nom)
>   * `fournisseurs[]` (id, nom)
>   * `approvisionnements[]` (id, date, reference, fournisseurId, lignes\[])
> * Créer un dossier `service/` qui contient les services suivants (en `.ts` ou `.js`) :
>
>   * `FournisseurService.js` : gère les appels API `/fournisseurs`
>   * `ArticleService.js` : gère les appels API `/articles`
>   * `ApprovisionnementService.js` : gère les appels API `/approvisionnements`
>
> ---
>
> ### 🎨 **2. Frontend (Vite + TypeScript + Tailwind CDN)**
>
> * Créer un projet Vite nommé **`app.front`** avec support **TypeScript**
> * Ajouter Tailwind via **CDN** dans `index.html`
>
> #### 📁 Structure :
>
> ```
> app.front/
> ├── index.html
> ├── main.ts
> ├── model/
> ├── service/
> ├── pages/
> │   ├── NewAppro.ts
> │   └── ListeAppro.ts
> └── component/
> ```
>
> #### 🗂️ `pages/NewAppro.ts`
>
> * Créer une méthode `render()` pour injecter le formulaire HTML (référence, fournisseur, articles)
> * Ajouter les méthodes pour :
>
>   * Récupérer la liste des articles et fournisseurs depuis le backend
>   * Ajouter dynamiquement des lignes d’articles
>   * Enregistrer un approvisionnement via `ApprovisionnementService`
>
> #### 🗂️ `pages/ListeAppro.ts`
>
> * Créer une méthode `render()` qui affiche la table des approvisionnements
> * Ajouter des méthodes pour :
>
>   * Lister tous les approvisionnements depuis le backend
>   * Filtrer les approvisionnements par **référence**
>
> ---
>
> ### 📄 `index.html`
>
> * Ajouter un **menu de navigation** avec 2 liens :
>
>   * **Nouveau** → charge la page `NewAppro`
>   * **Approvisionnement** → charge la page `ListeAppro`
>
> ```html
> <nav>
>   <a href="#" id="link-new">Nouveau</a>
>   <a href="#" id="link-list">Approvisionnement</a>
> </nav>
> <div id="app"></div>
> ```
>
> ---
>
> ### 🔁 `main.ts`
>
> * Ajouter le **routing manuel** basé sur le `click` des liens :
>
>   * Si on clique sur "Nouveau", charger `NewAppro.render()` dans le div `#app`
>   * Si on clique sur "Approvisionnement", charger `ListeAppro.render()` dans le div `#app`
>
> Exemple :
>
> ```ts
> import { render as renderNew } from './pages/NewAppro'
> import { render as renderList } from './pages/ListeAppro'
>
> document.getElementById("link-new")?.addEventListener("click", renderNew)
> document.getElementById("link-list")?.addEventListener("click", renderList)
> ```

---

## 🎯 Résultat attendu :

* Un backend **json-server** prêt avec des services simples en `service/`.
* Un frontend Vite **modulaire** avec navigation, liste et formulaire interactifs.
* Utilisation des bonnes pratiques TypeScript, composants modulaires, code propre.

---

Souhaitez-vous que je génère maintenant les **fichiers initiaux `db.json`, `NewAppro.ts`, `main.ts` et services `.js`** pour démarrer le projet plus rapidement ?
